import chess
from constants import piece_score, piece_position_scores

# Ánh xạ từ piece.piece_type (số nguyên) sang ký hiệu chuỗi
PIECE_TYPE_TO_SYMBOL = {
    chess.PAWN: "P",
    chess.KNIGHT: "N",
    chess.BISHOP: "B",
    chess.ROOK: "R",
    chess.QUEEN: "Q",
    chess.KING: "K"
}

def get_game_phase(board):
    total_material = 0
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece and piece.piece_type != chess.KING:
            symbol = PIECE_TYPE_TO_SYMBOL[piece.piece_type]
            total_material += piece_score[symbol]
    if total_material < 1500:
        return 0.0
    elif total_material < 3000:
        return (total_material - 1500) / 1500
    return 1.0

def get_material_score(board):
    white_score = 0
    black_score = 0
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            piece_symbol = PIECE_TYPE_TO_SYMBOL[piece.piece_type]
            if piece.color == chess.WHITE:
                white_score += piece_score[piece_symbol]
            else:
                black_score += piece_score[piece_symbol]
    return black_score - white_score

def get_piece_position_score(board, is_endgame):
    score = 0
    if is_endgame:
        piece_position_scores["wK"] = piece_position_scores["wK_end"]
        piece_position_scores["bK"] = piece_position_scores["bK_end"]
    else:
        piece_position_scores["wK"] = piece_position_scores["wK"]
        piece_position_scores["bK"] = piece_position_scores["bK"]

    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            rank = chess.square_rank(square)
            file = chess.square_file(square)
            color_prefix = "w" if piece.color == chess.WHITE else "b"
            piece_symbol = PIECE_TYPE_TO_SYMBOL[piece.piece_type]
            piece_key = f"{color_prefix}{piece_symbol}"
            if piece_key in piece_position_scores:
                if piece.color == chess.BLACK:
                    score += piece_position_scores[piece_key][rank][file]
                else:
                    score -= piece_position_scores[piece_key][rank][file]
    return score

def evaluate_board(board, ai_turn, is_endgame):
    if board.is_checkmate():
        return -99999 if board.turn else 99999
    if board.is_stalemate() or board.is_insufficient_material():
        return 0

    score = get_piece_position_score(board, is_endgame) + get_material_score(board)

    # Thêm phần thưởng cho nhập thành
    if ai_turn == chess.WHITE:
        if not board.has_kingside_castling_rights(chess.WHITE) and not board.has_queenside_castling_rights(chess.WHITE):
            score += 500  # Phần thưởng nếu trắng đã nhập thành
        if not board.has_kingside_castling_rights(chess.BLACK) and not board.has_queenside_castling_rights(chess.BLACK):
            score -= 500  # Phạt nếu đen đã nhập thành
    else:
        if not board.has_kingside_castling_rights(chess.BLACK) and not board.has_queenside_castling_rights(chess.BLACK):
            score += 500  # Phần thưởng nếu đen đã nhập thành
        if not board.has_kingside_castling_rights(chess.WHITE) and not board.has_queenside_castling_rights(chess.WHITE):
            score -= 500  # Phạt nếu trắng đã nhập thành

    if ai_turn == chess.BLACK:
        return score
    else:
        return -score