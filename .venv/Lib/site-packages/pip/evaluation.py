from constants import piece_score, piece_position_scores


def get_game_phase(gs):
    total_material = 0
    for row in range(8):
        for col in range(8):
            piece = gs.board[row][col]
            if piece != "--" and piece[1] != "K":
                total_material += piece_score[piece[1]]
    return total_material < 1500


def get_material_score(gs):
    white_score = 0
    black_score = 0
    for row in range(8):
        for col in range(8):
            piece = gs.board[row][col]
            if piece != "--":
                if piece[0] == "w":
                    white_score += piece_score[piece[1]]
                else:
                    black_score += piece_score[piece[1]]
    return black_score - white_score


def get_piece_position_score(gs, is_endgame):
    score = 0
    if is_endgame:
        piece_position_scores["wK"] = piece_position_scores["wK_end"]
        piece_position_scores["bK"] = piece_position_scores["bK_end"]
    else:
        piece_position_scores["wK"] = piece_position_scores["wK"]
        piece_position_scores["bK"] = piece_position_scores["bK"]

    for row in range(8):
        for col in range(8):
            piece = gs.board[row][col]
            if piece != "--":
                if piece[0] == "b":
                    score += piece_position_scores[piece][row][col]
                else:
                    score -= piece_position_scores[piece][row][col]
    return score


def is_passed_pawn(gs, row, col, color):
    direction = -1 if color == "w" else 1
    file = col
    start_row = row + direction
    end_row = 0 if color == "w" else 7
    for f in range(max(0, file - 1), min(8, file + 2)):
        r = start_row
        while 0 <= r <= 7:
            if gs.board[r][f] != "--" and gs.board[r][f][0] != color and gs.board[r][f][1] == "p":
                return False
            r += direction
    return True


def get_passed_pawn_score(gs, is_endgame):
    score = 0
    if is_endgame:
        for row in range(8):
            for col in range(8):
                piece = gs.board[row][col]
                if piece != "--" and piece[1] == "p":
                    if is_passed_pawn(gs, row, col, piece[0]):
                        rank = row if piece[0] == "b" else (7 - row)
                        bonus = 50 + rank * 20
                        score += bonus if piece[0] == "b" else -bonus
    return score


def get_king_activity_score(gs, is_endgame):
    score = 0
    if is_endgame:
        w_king = gs.kingLocation["w"]
        b_king = gs.kingLocation["b"]
        for row in range(8):
            for col in range(8):
                piece = gs.board[row][col]
                if piece != "--" and piece[1] == "p":
                    if piece[0] == "b":
                        dist = abs(w_king[0] - row) + abs(w_king[1] - col)
                        score -= (14 - dist) * 5
                    else:
                        dist = abs(b_king[0] - row) + abs(b_king[1] - col)
                        score += (14 - dist) * 5
    return score


def get_opponent_king_restriction_score(gs, ai_turn, is_endgame):
    score = 0
    if is_endgame:
        opp_color = "w" if ai_turn == "b" else "b"
        opp_king = gs.kingLocation[opp_color]
        row, col = opp_king
        if row in (0, 7) or col in (0, 7):
            bonus = 100 if (row in (0, 7) and col in (0, 7)) else 50
            temp_turn = gs.turn
            gs.turn = opp_color
            legal_moves = gs.getValidMoves()
            gs.turn = temp_turn
            if legal_moves:
                score += bonus if ai_turn == "b" else -bonus
    return score


def get_king_coordination_score(gs, ai_turn, is_endgame):
    score = 0
    if is_endgame:
        material_diff = get_material_score(gs)
        if (ai_turn == "b" and material_diff > 500) or (ai_turn == "w" and material_diff < -500):
            w_king = gs.kingLocation["w"]
            b_king = gs.kingLocation["b"]
            manhattan_dist = abs(w_king[0] - b_king[0]) + abs(w_king[1] - b_king[1])
            bonus = (14 - manhattan_dist) * 15
            score += bonus if ai_turn == "b" else -bonus
    return score


def evaluate_board(gs, ai_turn, is_endgame):
    # Only check for checkmate if the opponent is in check
    if gs.inCheck:
        temp_turn = gs.turn
        gs.turn = "w" if ai_turn == "b" else "b"
        legal_moves = gs.getValidMoves()
        gs.turn = temp_turn
        if not legal_moves:
            return 99999999 if ai_turn == gs.turn else -99999999

    score = get_piece_position_score(gs, is_endgame) + get_material_score(gs)

    if is_endgame and gs.inCheck:
        score += 500 if ai_turn == gs.turn else -500

    if is_endgame:
        w_king = gs.kingLocation["w"]
        b_king = gs.kingLocation["b"]
        manhattan_dist = abs(w_king[0] - b_king[0]) + abs(w_king[1] - b_king[1])
        king_distance_bonus = (14 - manhattan_dist) * 10
        score += king_distance_bonus if ai_turn == "b" else -king_distance_bonus

    score += get_passed_pawn_score(gs, is_endgame)
    score += get_king_activity_score(gs, is_endgame)
    score += get_opponent_king_restriction_score(gs, ai_turn, is_endgame)
    score += get_king_coordination_score(gs, ai_turn, is_endgame)

    return score if ai_turn == "b" else -score