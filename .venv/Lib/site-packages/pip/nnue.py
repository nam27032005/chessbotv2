import chess
import numpy as np

class NNUE:
    def __init__(self):
        # Khởi tạo các trọng số giả lập cho mạng NNUE
        self.input_size = 768  # 64 ô x 12 loại quân (6 loại quân x 2 màu)
        self.hidden_size = 256
        self.output_size = 1

        # Trọng số giả lập
        self.input_to_hidden_weights = np.random.randn(self.input_size, self.hidden_size) * 0.1
        self.hidden_bias = np.zeros(self.hidden_size)
        self.hidden_to_output_weights = np.random.randn(self.hidden_size, self.output_size) * 0.1
        self.output_bias = np.zeros(self.output_size)

    def board_to_features(self, board):
        # Chuyển trạng thái bàn cờ thành vector đặc trưng
        features = np.zeros(768)  # 64 ô x 12 loại quân
        for square in chess.SQUARES:
            piece = board.piece_at(square)
            if piece:
                piece_idx = piece.piece_type - 1 + (6 if piece.color == chess.BLACK else 0)
                feature_idx = square * 12 + piece_idx
                features[feature_idx] = 1
        return features

    def evaluate(self, board):
        # Chuyển bàn cờ thành vector đặc trưng
        features = self.board_to_features(board)

        # Tính toán qua mạng NNUE
        hidden = np.maximum(0, np.dot(features, self.input_to_hidden_weights) + self.hidden_bias)  # ReLU activation
        output = np.dot(hidden, self.hidden_to_output_weights) + self.output_bias

        # Trả về giá trị đánh giá
        score = output[0]
        return score if board.turn == chess.WHITE else -score