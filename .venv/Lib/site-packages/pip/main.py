import pygame
import pygame_gui
from chess_engine import GameState
from search import Search
from zobrist import init_zobrist_keys

WIDTH = HEIGHT = 512
DIMENSION = 8
SQ_SIZE = WIDTH // DIMENSION
MAX_FPS = 30
colorBoard = [(255, 255, 255), (0, 102, 0), (255, 255, 0)]

LEFT_PANEL = WIDTH
TOP_PANEL = 0
WIDTH_PANEL = 4 * SQ_SIZE
HEIGHT_PANEL = HEIGHT
WIDTH_WINDOW = WIDTH + WIDTH_PANEL
HEIGHT_WINDOW = HEIGHT

LEFT_MOVE_BOX = 0
TOP_MOVE_BOX = 3 * SQ_SIZE // 2
WIDTH_MOVE_BOX = WIDTH_PANEL - 30
HEIGHT_MOVE_BOX = HEIGHT_PANEL * 11 // 16

LEFT_TURN = 0
TOP_TURN = 0
LEFT_POSSIBLE_MOVE = 0
TOP_POSSIBLE_MOVE = SQ_SIZE // 2
LEFT_INCHECK = 0
TOP_INCHECK = SQ_SIZE
WIDTH_LABEL = WIDTH_PANEL - 30
HEIGHT_LABEL = SQ_SIZE // 2

class GameController:
    def __init__(self):
        pygame.init()
        init_zobrist_keys()
        pygame.display.set_caption("Chess Game - PvC")
        self.screen = pygame.display.set_mode((WIDTH_WINDOW, HEIGHT_WINDOW))

        self.manager = pygame_gui.UIManager((WIDTH_WINDOW, HEIGHT_WINDOW))
        self.background = pygame.Surface((WIDTH_WINDOW, HEIGHT_WINDOW))
        self.background.fill((32, 32, 32))
        self.clock = pygame.time.Clock()

        self.color_chosen = None
        self.selection_active = True
        self.running = True
        self._load_selection_gui()

    def _load_selection_gui(self):
        self.selection_panel = pygame_gui.elements.UIWindow(
            rect=pygame.Rect((WIDTH // 4, HEIGHT // 4), (WIDTH // 2, HEIGHT // 2)),
            manager=self.manager,
            window_display_title="Choose Your Color"
        )
        self.white_button = pygame_gui.elements.UIButton(
            relative_rect=pygame.Rect((20, 50), (WIDTH // 4, 50)),
            text="Play as White",
            manager=self.manager,
            container=self.selection_panel
        )
        self.black_button = pygame_gui.elements.UIButton(
            relative_rect=pygame.Rect((20, 120), (WIDTH // 4, 50)),
            text="Play as Black",
            manager=self.manager,
            container=self.selection_panel
        )

    def _initialize_game(self):
        self.gs = GameState()
        # Bot plays opposite color: ai_turn = 1 (Black) if player is White, 0 (White) if player is Black
        ai_turn = 1 if self.color_chosen == "w" else 0
        self.bot = Search(ai_turn)
        self.IMAGES = {}
        self._loadImages()

        self._load_game_gui()
        self.click = ()
        self.playerClicks = []
        self.validMoves = self.gs.getValidMoves()
        self.moveMade = False
        self.gameOver = False
        self.bot_thinking = False

    def _loadImages(self):
        pieces = ["wp", "wR", "wN", "wB", "wK", "wQ", "bp", "bR", "bN", "bB", "bK", "bQ"]
        for piece in pieces:
            piece_upper = piece[0] + piece[1].upper()
            try:
                self.IMAGES[piece] = pygame.transform.scale(
                    pygame.image.load(f"pieces/{piece_upper}.png"), (SQ_SIZE, SQ_SIZE)
                )
            except pygame.error as e:
                print(f"Error loading image for {piece}: {e}")
                self.IMAGES[piece] = None

    def _load_game_gui(self):
        self.chess_panel = pygame_gui.elements.UIWindow(
            rect=pygame.Rect((LEFT_PANEL, TOP_PANEL), (WIDTH_PANEL, HEIGHT_PANEL)),
            manager=self.manager,
            window_display_title="Chess Panel"
        )
        self.text_box = pygame_gui.elements.UITextBox(
            relative_rect=pygame.Rect((LEFT_MOVE_BOX, TOP_MOVE_BOX), (WIDTH_MOVE_BOX, HEIGHT_MOVE_BOX)),
            html_text="",
            manager=self.manager,
            container=self.chess_panel
        )
        self.label_turn = pygame_gui.elements.UILabel(
            relative_rect=pygame.Rect((LEFT_TURN, TOP_TURN), (WIDTH_LABEL, HEIGHT_LABEL)),
            text="Turn: ",
            manager=self.manager,
            container=self.chess_panel
        )
        self.label_possible_move = pygame_gui.elements.UILabel(
            relative_rect=pygame.Rect((LEFT_POSSIBLE_MOVE, TOP_POSSIBLE_MOVE), (WIDTH_LABEL, HEIGHT_LABEL)),
            text="Possible moves: ",
            manager=self.manager,
            container=self.chess_panel
        )
        self.label_incheck = pygame_gui.elements.UILabel(
            relative_rect=pygame.Rect((LEFT_INCHECK, TOP_INCHECK), (WIDTH_LABEL, HEIGHT_LABEL)),
            text="In Check: ",
            manager=self.manager,
            container=self.chess_panel
        )

    def drawGameScreen(self):
        self.screen.blit(self.background, (0, 0))
        self.drawBoard()
        self.drawLastMove()
        self.drawPiece()
        self.highlightSquares()
        self.manager.draw_ui(self.screen)
        if self.gameOver:
            self.drawGameOver()

    def drawBoard(self):
        for i in range(DIMENSION):
            for j in range(DIMENSION):
                color = colorBoard[(i + j) % 2]
                pygame.draw.rect(self.screen, color, pygame.Rect(j * SQ_SIZE, i * SQ_SIZE, SQ_SIZE, SQ_SIZE))

    def drawLastMove(self):
        if self.gs.moveLog:
            lastMove = self.gs.moveLog[-1]
            surface = pygame.Surface((SQ_SIZE, SQ_SIZE))
            surface.set_alpha(100)
            surface.fill((153, 255, 255))
            x, y = lastMove.sqStart[0], lastMove.sqStart[1]
            x1, y1 = lastMove.sqEnd[0], lastMove.sqEnd[1]
            self.screen.blit(surface, (y * SQ_SIZE, x * SQ_SIZE))
            self.screen.blit(surface, (y1 * SQ_SIZE, x1 * SQ_SIZE))

    def drawPiece(self):
        font = pygame.font.SysFont(None, 24)
        for i in range(DIMENSION):
            for j in range(DIMENSION):
                piece = self.gs.board[i][j]
                if piece != "--":
                    if self.IMAGES.get(piece):
                        self.screen.blit(self.IMAGES[piece], pygame.Rect(j * SQ_SIZE, i * SQ_SIZE, SQ_SIZE, SQ_SIZE))
                    else:
                        text = font.render(piece, True, (0, 0, 0) if piece[0] == "w" else (255, 255, 255))
                        text_rect = text.get_rect(center=(j * SQ_SIZE + SQ_SIZE // 2, i * SQ_SIZE + SQ_SIZE // 2))
                        self.screen.blit(text, text_rect)

    def drawGameOver(self):
        font = pygame.font.SysFont(None, 36)
        if self.gs.gameResult == "draw":
            text = font.render("Draw!", True, (0, 0, 0))
        elif self.gs.gameResult == "white":
            text = font.render("White Wins!", True, (0, 0, 0))
        else:
            text = font.render("Black Wins!", True, (0, 0, 0))
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        self.screen.blit(text, text_rect)

    def highlightSquares(self):
        sqHighlight = []
        if self.click:
            for move in self.validMoves:
                if move.sqStart == self.click:
                    sqHighlight.append(move.sqEnd)

            for (x, y) in sqHighlight:
                surface = pygame.Surface((SQ_SIZE, SQ_SIZE))
                surface.set_alpha(150)
                surface.fill(colorBoard[2])
                self.screen.blit(surface, (y * SQ_SIZE, x * SQ_SIZE))

    def editChessPanel(self):
        self.text_box.set_text(self.gs.getMoveNotation())
        self.label_turn.set_text(self.gs.getTurn())
        self.label_possible_move.set_text(f"Possible moves: {len(self.validMoves)}")
        self.label_incheck.set_text(f"In Check: {self.gs.inCheck}")

    def clickUserHandler(self):
        pos = pygame.mouse.get_pos()
        x = int(pos[1] / SQ_SIZE)
        y = int(pos[0] / SQ_SIZE)

        if x in range(8) and y in range(8):
            if self.click == (x, y) or (not self.click and (
                    self.gs.board[x][y] == "--" or self.gs.board[x][y][0] != self.gs.turn)):
                self.click = ()
                self.playerClicks = []
            else:
                self.click = (x, y)
                self.playerClicks.append(self.click)

            if len(self.playerClicks) == 2:
                id_click = 1000 * self.playerClicks[0][0] + 100 * self.playerClicks[0][1] + \
                           10 * self.playerClicks[1][0] + self.playerClicks[1][1]
                for move in self.validMoves:
                    if move.moveID == id_click:
                        self.gs.makeMove(move)
                        self.moveMade = True
                        break
                self.click = ()
                self.playerClicks = []

    def run(self):
        print("Please choose your color...")
        while self.running:
            self.time_delta = self.clock.tick(MAX_FPS) / 1000

            if self.selection_active:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        self.running = False
                    elif event.type == pygame_gui.UI_BUTTON_PRESSED:
                        if event.ui_element == self.white_button:
                            self.color_chosen = "w"
                            self.selection_active = False
                            print("You play as White, Bot plays as Black.")
                            self._initialize_game()
                        elif event.ui_element == self.black_button:
                            self.color_chosen = "b"
                            self.selection_active = False
                            print("You play as Black, Bot plays as White.")
                            self._initialize_game()
                    self.manager.process_events(event)

                self.screen.blit(self.background, (0, 0))
                self.manager.update(self.time_delta)
                self.manager.draw_ui(self.screen)
                pygame.display.update()
                continue

            if self.moveMade:
                self.validMoves = self.gs.getValidMoves()
                if self.gs.gameResult:
                    self.gameOver = True
                self.editChessPanel()
                self.moveMade = False

            # Bot moves when it's the bot's turn
            bot_color = "w" if self.bot.ai_turn == 0 else "b"
            if not self.gameOver and self.gs.turn == bot_color and not self.bot_thinking:
                self.bot_thinking = True
                print("Bot is thinking...")
                move = self.bot.get_best_move(self.gs)
                if move:
                    self.gs.makeMove(move)
                    print(f"Bot move: {move.getChessNotation()}")
                self.bot_thinking = False
                self.moveMade = True

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.MOUSEBUTTONDOWN and not self.gameOver and self.gs.turn == self.color_chosen:
                    self.clickUserHandler()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        self.__init__()
                        print("Reset game")
                    elif event.key == pygame.K_z:
                        self.gs.undoMove()
                        self.moveMade = True
                        self.gameOver = False
                        self.bot_thinking = False
                self.manager.process_events(event)

            self.manager.update(self.time_delta)
            self.drawGameScreen()
            pygame.display.update()

        pygame.quit()

if __name__ == "__main__":
    game = GameController()
    game.run()